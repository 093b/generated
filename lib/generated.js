'use strict';
var path = require('path')
const PROTOBUF_EXTENSIONS = ['.py', '.java', '.h', '.cc', '.cpp', '.m', '.rb', '.php']
class Generated {
  constructor(name, data){
    this.name = name
    this.extname = path.extname(name)
    this.lines = (data == null) ? [] : data.toString().split("\n")
    this._data = data
  }

  isXcodeFile() {
    return ['.nib', '.xcworkspacedata', '.xcuserstate'].includes(this.extname)
  }

  isIntellijFile() {
    return /(?:^|\/)\.idea\//.test(this.name);
  }

  isCocoapods() {
    return /(^Pods|\/Pods)\//.test(this.name);
  }

  isMaybeMinified() {
    return [".js", ".css"].includes(this.extname.toLowerCase())
  }

  isMinifiedFiles() {
    if (this.isMaybeMinified() && this.lines.length > 0) {
      let chars = 0
      for (const line of this.lines) {
        chars += line.length
      }
      return Math.round(chars / this.lines.length) > 110
    } else {
      return false
    }
  }

  hasSourceMap() {
    if (!this.isMaybeMinified()) {
      return false
    }
    if (this.lines.length < 2) {
      return false
    }
    return this.lines.slice(-2).some((line) => {
      return /^\/[*\/][\#@] source(?:Mapping)?URL|sourceURL=/.test(line)
    });
  }

  isSourceMap() {
    if (!this.extname.toLowerCase() == '.map') {
      return false
    }

    return /(\.css|\.js)\.map$/i.test(this.name) ||           // Name convention
      /^{"version":\d+,/.test(this.lines[0]) ||               // Revision 2 and later begin with the version number
      /^\/\*\* Begin line maps\. \*\*\/{/.test(this.lines[0]) // Revision 1 begins with a magic comment
  }

  isCompiledCoffeescript() {
    if (this.extname != ".js") {
      return false
    }

    // CoffeeScript generated by > 1.2 include a comment on the first line
    if (/^\/\/ Generated by /.test(this.lines[0])) {
      return true
    }

    if (this.lines[0] == '(function() {' && this.lines[-2] == '}).call(this);' && this.lines[-1] == '') {
      let score = 0
      this.lines.forEach((line) => {
        if (/var /.test(line)) {
          score += 1 * (line.match(/(_fn|_i|_len|_ref|_results)/g) || []).length
          score += 3 * (line.match(/(__bind|__extends|__hasProp|__indexOf|__slice)/g) || []).count
        }
      });

      if (score >= 3) {
        return true
      } else {
        return false
      }
    }
  }


  isCarthageBuild() {
    return /(^|\/)Carthage\/Build\//.test(this.name);
  }

  isGeneratedGraphqlRelay() {
    return /__generated__\//.test(this.name);
  }

  isGeneratedNetDesignerFile() {
    return /\.designer\.(cs|vb)$/.test(this.name.toLowerCase());
  }

  isGeneratedNetSpecflowFeatureFile() {
    return /\.feature\.cs$/.test(this.name.toLowerCase());
  }

  isComposerLock() {
    return /composer\.lock/.test(this.name);
  }

  isCargoLock() {
    return /Cargo\.lock/.test(this.name);
  }

  isNodeModules() {
    return /node_modules\//.test(this.name);
  }

  isGoVendor() {
    return /vendor\/((?!-)[-0-9A-Za-z]+(?<!-)\.)+(com|edu|gov|in|me|net|org|fm|io)/.test(this.name);
  }

  isGoLock() {
    return /(Gopkg|glide)\.lock/.test(this.name);
  }

  isNpmShrinkwrapOrPackageLock() {
    return (/npm-shrinkwrap\.json/.test(this.name) || /package-lock\.json/.test(this.name));
  }

  isGodeps() {
    return /Godeps\//.test(this.name);
  }

  isGoMod() {
    return (/go\.mod/.test(this.name) || /go\.sum/.test(this.name));
  }

  isGeneratedByZephir() {
    return /.\.zep\.(?:c|h|php)$/.test(this.name);
  }

  isGeneratedNetDocfile() {
    if (this.extname.toLowerCase() != ".xml") {
      return false
    }
    if (this.lines.length <= 3) {
      return false
    }
    return (this.lines[1].includes("<doc>") &&
      this.lines[2].includes("<assembly>") &&
      this.lines[this.lines.length - 2].includes("</doc>")
    )
  }

  isCompiledCythonFile() {
    if (!['.c', '.cpp'].includes(this.extname)) {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].includes("Generated by Cython")
  }

  isGeneratedGo() {
    if (this.extname != ".go") {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].includes("Code generated by")
  }

  isGeneratedProtocolBuffer() {
    if (!PROTOBUF_EXTENSIONS.includes(this.extname)) {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    g = "Generated by the protocol buffer compiler.  DO NOT EDIT!"
    for (var i = 0; i < 3; i++) {
      if (this.lines[i].includes(g)) {
        return true
      }
    }
  }

  isGeneratedJavascriptProtocolBuffer() {
    if (this.extname != ".js") {
      return false
    }
    if (this.lines.length <= 6) {
      return false
    }
    return this.lines[5].includes("GENERATED CODE -- DO NOT EDIT!")
  }

  isGeneratedJniHeader() {
    if (this.extname != '.h')  {
      return false
    }
    if (this.lines.length <= 2) {
      return false
    }
    return (this.lines[0].includes("/* DO NOT EDIT THIS FILE - it is machine generated */") &&
      this.lines[1].includes("#include <jni.h>"))
  }

  isVcrCassette() {
    if (this.extname != '.yml')  {
      return false
    }
    if (this.lines.length <= 2) {
      return false
    }
    return this.lines[this.lines.length - 2].includes("recorded_with: VCR")
  }

  isGeneratedModule() {
    if (this.extname != '.mod')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return (this.lines[0].includes("PCBNEW-LibModule-V") ||
      this.lines[0].includes("GFORTRAN module version '"))
  }

  isGeneratedUnity3dMeta() {
    if (this.extname != '.meta')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].includes("fileFormatVersion: ")
  }

  isGeneratedRacc() {
    if (this.extname != '.rb')  {
      return false
    }
    if (this.lines.length <= 2) {
      return false
    }
    return this.lines[2].startsWith("# This file is automatically generated by Racc")
  }

  isGeneratedJflex() {
    if (this.extname != '.java')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].startsWith("/* The following code was generated by JFlex ")
  }

  isGeneratedGrammarkit() {
    if (this.extname != '.java')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].startsWith("// This is a generated file. Not intended for manual editing.")
  }

  isGeneratedRoxygen2() {
    if (this.extname != '.Rd')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].includes("% Generated by roxygen2: do not edit by hand")
  }

  isGeneratedPkgdown() {
    if (this.extname != '.html')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return (this.lines[0].startsWith("<!-- Generated by pkgdown: do not edit by hand -->") ||
      this.lines[1].startsWith("<!-- Generated by pkgdown: do not edit by hand -->"))
  }

  isGeneratedJison() {
    if (this.extname != '.js')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return (this.lines[0].startsWith("/* parser generated by jison ") ||
      this.lines[0].startsWith("/* generated by jison-lex "))
  }

  isGeneratedGrpcCpp() {
    if (!['.cpp', '.hpp', '.h', '.cc'].includes(this.extname)) {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].startsWith("// Generated by the gRPC")
  }

  isGeneratedDart() {
    if (this.extname != '.dart')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return /generated code\W{2,3}do not modify/.test(this.lines[0].toLowerCase())
  }

  isGeneratedPerlPpportHeader() {
    if (!/ppport\.h$/.test(this.name)) {
      return false
    }
    if (this.lines.length <= 10) {
      return false
    }
    return this.lines[8].includes("Automatically created by Devel::PPPort")
  }


  isMinifiedFiles() {
    if (!['.js', '.css'].includes(this.extname)) {
      return false
    }
    if (this.lines.length > 0) {
      var avg_line_length = 0
      for(var i = 0; i < this.lines.length;i++){
        avg_line_length += this.lines[i].length
      }
      return ((avg_line_length / this.lines.length) > 110)
    } else {
      return false
    }
  }

  isGeneratedYarnPlugNPlay() {
    return /(^|\/)\.pnp\..*$/.test(this.name);
  }

  isPoetryLock() {
    return /poetry\.lock/.test(this.name);
  }

  isEsyLock() {
    return /(^|\/)(\w+\.)?esy.lock$/.test(this.name);
  }
  isTerraformLock() {
    return /(?:^|\/)\.terraform\.lock\.hcl$/.test(this.name);
  }
  isPipenvLock() {
    return /Pipfile\.lock/.test(this.name);
  }
  isGeneratedAntlr() {
    if (this.extname != ".g") {
      return false
    }
    if (this.lines.length <= 2) {
      return false
    }
    return this.lines[1].includes("generated by Xtest")
  }

  isGeneratedHTML() {
    if ([".html", ".htm", ".xhtml"].includes(this.extname.toLowerCase())) {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }

    // Pkgdown
    // some line
    let first_lines = this.lines.some(line => {
      if (line.includes("<!-- Generated by pkgdown: do not edit by hand -->")) {
        return true
      }
    });
    if (first_lines) {
      return true
    }
  }

  isGeneratedGamemakerStudio() {
    if (![".yy", ".yyp"].includes(this.extname)) {
      return false
    }

    if (this.lines.length <= 3) {
      return false
    }
    return /\"modelName\"\:\s*\"GM/.test(this.lines[2]) ||
      /^\d\.\d\.\d.+\|\{/.test(this.lines[0])
  }

  isGenerated() {
    return (this.isXcodeFile() ||
      this.isGeneratedGamemakerStudio() ||
      this.isCompiledCoffeescript() ||
      this.hasSourceMap() ||
      this.isEsyLock() ||
      this.isGeneratedAntlr() ||
      this.isPipenvLock() ||
      this.isTerraformLock() ||
      this.isPoetryLock() ||
      this.isCarthageBuild() ||
      this.isMinifiedFiles() ||
      this.isGeneratedGraphqlRelay() ||
      this.isGeneratedNetDesignerFile() ||
      this.isGeneratedNetSpecflowFeatureFile() ||
      this.isComposerLock() ||
      this.isCargoLock() ||
      this.isNodeModules() ||
      this.isGoVendor() ||
      this.isGoLock() ||
      this.isIntellijFile() ||
      this.isNpmShrinkwrapOrPackageLock() ||
      this.isGodeps() ||
      this.isGeneratedYarnPlugNPlay() ||
      this.isGeneratedByZephir() ||
      this.isSourceMap() ||
      this.isGeneratedNetDocfile() ||
      this.isCompiledCythonFile() ||
      this.isGeneratedGo() ||
      this.isGeneratedProtocolBuffer() ||
      this.isGeneratedJavascriptProtocolBuffer() ||
      this.isGeneratedJniHeader() ||
      this.isVcrCassette() ||
      this.isGeneratedModule() ||
      this.isGeneratedUnity3dMeta() ||
      this.isGeneratedRacc() ||
      this.isGeneratedJflex() ||
      this.isGeneratedGrammarkit() ||
      this.isGeneratedRoxygen2() ||
      this.isGeneratedPkgdown() ||
      this.isGeneratedJison() ||
      this.isGeneratedGrpcCpp() ||
      this.isGeneratedDart() ||
      this.isGeneratedPerlPpportHeader() ||
      this.isCocoapods()
    )
  }
}

module.exports = Generated;

'use strict';
var path = require('path')

class Generated {
  constructor(name, data){
    this.name = name
    this.extname = path.extname(name)
    this.lines = data.toString().split("\n")
    this._data = data
  }

  is_xcode_file() {
    return ['.nib', '.xcworkspacedata', '.xcuserstate'].includes(this.extname)
  }

  is_carthage_build() {
    return /(^|\/)Carthage\/Build\//.test(this.name);
  }

  is_generated_graphql_relay() {
    return /__generated__\//.test(this.name);
  }

  is_generated_net_designer_file() {
    return /\.designer\.(cs|vb)$/.test(this.name.toLowerCase());
  }

  is_generated_net_specflow_feature_file() {
    return /\.feature\.cs$/.test(this.name.toLowerCase());
  }

  is_composer_lock() {
    return /composer\.lock/.test(this.name);
  }

  is_cargo_lock() {
    return /Cargo\.lock/.test(this.name);
  }

  is_node_modules() {
    return /node_modules\//.test(this.name);
  }

  is_go_vendor() {
    return /vendor\/((?!-)[-0-9A-Za-z]+(?<!-)\.)+(com|edu|gov|in|me|net|org|fm|io)/.test(this.name);
  }

  is_go_lock() {
    return /(Gopkg|glide)\.lock/.test(this.name);
  }

  is_npm_shrinkwrap_or_package_lock() {
    return (/npm-shrinkwrap\.json/.test(this.name) || /package-lock\.json/.test(this.name));
  }

  is_godeps() {
    return /Godeps\//.test(this.name);
  }

  is_go_mod() {
    return (/go\.mod/.test(this.name) || /go\.sum/.test(this.name));
  }

  is_generated_by_zephir() {
    return /.\.zep\.(?:c|h|php)$/.test(this.name);
  }

  is_source_map() {
    if (this.extname.toLowerCase() == '.map') {
      return true
    }
    return false
  }

  is_generated_net_docfile() {
    if (!this.extname.toLowerCase() == ".xml") {
      return false
    }
    if (this.lines.length <= 3) {
      return false
    }
    return (this.lines[1].includes("<doc>") &&
      this.lines[2].includes("<assembly>") &&
      this.lines[this.lines.length - 2].includes("</doc>")
    )
  }

  is_compiled_cython_file() {
    if (!['.c', '.cpp'].includes(this.extname)) {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].includes("Generated by Cython")
  }

  is_generated_go() {
    if (this.extname != ".go") {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].includes("Code generated by")
  }

  is_generated_protocol_buffer() {
    if (!['.py', '.java', '.h', '.cc', '.cpp', '.rb'].includes(this.extname)) {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].includes("Generated by the protocol buffer compiler.  DO NOT EDIT!")
  }

  is_generated_javascript_protocol_buffer() {
    if (this.extname != ".js") {
      return false
    }
    if (this.lines.length <= 6) {
      return false
    }
    return this.lines[5].includes("GENERATED CODE -- DO NOT EDIT!")
  }

  is_generated_jni_header() {
    if (this.extname != '.h')  {
      return false
    }
    if (this.lines.length <= 2) {
      return false
    }
    return (this.lines[0].includes("/* DO NOT EDIT THIS FILE - it is machine generated */") &&
      this.lines[1].includes("#include <jni.h>"))
  }

  is_vcr_cassette() {
    if (this.extname != '.yml')  {
      return false
    }
    if (this.lines.length <= 2) {
      return false
    }
    return this.lines[this.lines.length - 2].includes("recorded_with: VCR")
  }

  is_generated_module() {
    if (this.extname != '.mod')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return (this.lines[0].includes("PCBNEW-LibModule-V") ||
      this.lines[0].includes("GFORTRAN module version '"))
  }

  is_generated_unity3d_meta() {
    if (this.extname != '.meta')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].includes("fileFormatVersion: ")
  }

  is_generated_racc() {
    if (this.extname != '.rb')  {
      return false
    }
    if (this.lines.length <= 2) {
      return false
    }
    return this.lines[2].startsWith("# This file is automatically generated by Racc")
  }

  is_generated_jflex() {
    if (this.extname != '.java')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].startsWith("/* The following code was generated by JFlex ")
  }

  is_generated_grammarkit() {
    if (this.extname != '.java')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].StartsWith("// This is a generated file. Not intended for manual editing.")
  }

  is_generated_roxygen2() {
    if (this.extname != '.Rd')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].includes("% Generated by roxygen2: do not edit by hand")
  }

  is_generated_pkgdown() {
    if (this.extname != '.html')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return (this.lines[0].startsWith("<!-- Generated by pkgdown: do not edit by hand -->") ||
      this.lines[1].startsWith("<!-- Generated by pkgdown: do not edit by hand -->"))
  }

  is_generated_jison() {
    if (this.extname != '.js')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return (this.lines[0].startsWith("/* parser generated by jison ") ||
      this.lines[0].startsWith("/* generated by jison-lex "))
  }

  is_generated_yarn_lock() {
    if (!/yarn\.lock/.test(this.name)) {
      return false
    }
    if (this.lines.length == 0) {
      return false
    }
    return this.lines[0].includes("# THIS IS AN AUTOGENERATED FILE")
  }

  is_generated_grpc_cpp() {
    if (!['.cpp', '.hpp', '.h', '.cc'].includes(this.extname)) {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return this.lines[0].startsWith("// Generated by the gRPC")
  }

  is_generated_dart() {
    if (this.extname != '.dart')  {
      return false
    }
    if (this.lines.length <= 1) {
      return false
    }
    return /generated code\W{2,3}do not modify/.test(this.lines[0].toLowerCase())
  }

  is_generated_perl_ppport_header() {
    if (!/ppport\.h$/.test(this.name)) {
      return false
    }
    if (this.lines.length <= 10) {
      return false
    }
    return this.lines[8].includes("Automatically created by Devel::PPPort")
  }

  is_cocoapods() {
    return /(^Pods|\/Pods)\//.test(this.name);
  }

  is_minified_files() {
    if (!['.js', '.css'].includes(this.extname)) {
      return false
    }
    if (this.lines.length > 0) {
      var avg_line_length = 0
      for(var i = 0; i < this.lines.length;i++){
        avg_line_length += this.lines[i].length
      }
      return ((avg_line_length / this.lines.length) > 110)
    } else {
      return false
    }
  }


  is_generated() {
    return (this.is_xcode_file() ||
      this.is_carthage_build() ||
      this.is_minified_files() ||
      this.is_generated_graphql_relay() ||
      this.is_generated_net_designer_file() ||
      this.is_generated_net_specflow_feature_file() ||
      this.is_composer_lock() ||
      this.is_cargo_lock() ||
      this.is_node_modules() ||
      this.is_go_vendor() ||
      this.is_go_lock() ||
      this.is_npm_shrinkwrap_or_package_lock() ||
      this.is_godeps() ||
      this.is_go_mod() ||
      this.is_generated_by_zephir() ||
      this.is_source_map() ||
      this.is_generated_net_docfile() ||
      this.is_compiled_cython_file() ||
      this.is_generated_go() ||
      this.is_generated_protocol_buffer() ||
      this.is_generated_javascript_protocol_buffer() ||
      this.is_generated_jni_header() ||
      this.is_vcr_cassette() ||
      this.is_generated_module() ||
      this.is_generated_unity3d_meta() ||
      this.is_generated_racc() ||
      this.is_generated_jflex() ||
      this.is_generated_grammarkit() ||
      this.is_generated_roxygen2() ||
      this.is_generated_pkgdown() ||
      this.is_generated_jison() ||
      this.is_generated_yarn_lock() ||
      this.is_generated_grpc_cpp() ||
      this.is_generated_dart() ||
      this.is_generated_perl_ppport_header() ||
      this.is_cocoapods()
    )
  }
}

module.exports = Generated;
